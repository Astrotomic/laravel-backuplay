<?php

return [
    /*
    |--------------------------------------------------------------------------
    | Strict Mode
    |--------------------------------------------------------------------------
    |
    | If the strict mode is enabled we will throw an exception
    | instead of just outputting an error on the command-line.
    |
    */
    'strict' => false,

    /*
    |--------------------------------------------------------------------------
    | Folder List
    |--------------------------------------------------------------------------
    |
    | The list of folders that should be backuped.
    |
    */
    'folders' => [

    ],

    /*
    |--------------------------------------------------------------------------
    | File List
    |--------------------------------------------------------------------------
    |
    | The list of files that should be backuped.
    |
    */
    'files' => [

    ],

    /*
    |--------------------------------------------------------------------------
    | Disk name
    |--------------------------------------------------------------------------
    |
    | The name of the configured disk to store the backups.
    | Use `false` to disable storing backups.
    |
    */
    'disk' => 'local',

    /*
    |--------------------------------------------------------------------------
    | Storage path
    |--------------------------------------------------------------------------
    |
    | The directory in the given storage disk where the archives are placed.
    | Let it empty for the "root" of the storage.
    |
    */
    'storage_path' => '',

    /*
    |--------------------------------------------------------------------------
    | Storage cycle
    |--------------------------------------------------------------------------
    |
    | The cycle how to store the backups. This option decides how the backups
    | are named and where they are stored.
    | If you want to customize the name use "custom" as value. You can use
    | multiple cycles.
    | possible values are:
    | dailyW: {hash}.{date:w}
    | dailyM: {hash}.{date:j}
    | dailyY: {hash}.{date:z}
    | weekly: {hash}.{date:W}
    | monthly: {hash}.{date:n}
    | custom: storage_filename
    |
    */
    'storage_cycle' => [
        'dailyW',
    ],

    /*
    |--------------------------------------------------------------------------
    | Storage filename
    |--------------------------------------------------------------------------
    |
    | The template for the filename without extension.
    | {unique} a unique id generated by uniqid()
    | {hash} the hash of all folders and files
    | {host} the hostname received by gethostname()
    | {date:...} get informations out of the date() function
    |
    */
    'storage_filename' => '{hash}.{date:D}',

    /*
    |--------------------------------------------------------------------------
    | Archive Type
    |--------------------------------------------------------------------------
    |
    | The archive type to use for the backup archives.
    | Take a look at the Zippy-Package documentation for a list of possible values.
    | https://github.com/alchemy-fr/Zippy#adapters
    |
    */
    'extension' => 'zip',

    /*
    |--------------------------------------------------------------------------
    | Temp path
    |--------------------------------------------------------------------------
    |
    | The directory where the archives are temporary stored
    | during the creation.
    |
    */
    'temp_path' => [
        'dir' => storage_path('tmp/archives'),
        'chmod' => 0777,
    ],

    /*
    |--------------------------------------------------------------------------
    | Scripts
    |--------------------------------------------------------------------------
    |
    | Scripts that should be called before or after the create backup.
    | For example `automysqlbackup` or things like this.
    |
    */
    'scripts' => [
        'before' => [
            'dir',
        ],
        'after' => [
            
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Log
    |--------------------------------------------------------------------------
    |
    | Log everything with monolog: `\Log::***($message)`
    |
    */
    'log' => true,
];
